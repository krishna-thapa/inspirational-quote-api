###
#  summary: Sign In API endpoint to login into the account
#  description: >
#   This can only be done by the user that have an existing account.
#  tags:
#    - Auth
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Sign in form details
#      schema:
#        $ref: '#/definitions/form.SignInForm'
#  responses:
#    200:
#      description: success
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    401:
#      description: Unauthorized with wrong password but with valid email
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    404:
#      description: User account is not found in the database
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
###
POST        /signIn                 controllers.auth.AuthController.signIn

###
#  summary: Sign up API endpoint to creater a new account
#  description: >
#   This can be done by any new user.
#  tags:
#    - Auth
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Sign up form details
#      schema:
#        $ref: '#/definitions/form.SignUpForm'
#  responses:
#    200:
#      description: success with id of newly created record
#      schema:
#        $ref: '#/definitions/com.krishna.response.OkResponse'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    406:
#      description: Account already exist in the database
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
###
POST        /signUp                  controllers.auth.AuthController.signUp

###
#  summary: List all the user accounts from database
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - Auth
#  responses:
#    200:
#      description: All the existing users
#      schema:
#        $ref: '#/definitions/model.UserDetail'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
GET        /users                    controllers.auth.AuthController.getAllUser

###
#  summary: Get the selected user details
#  description: >
#   Logged in user role can view thier own personal info only whereas an admin can view anyone's record info details.
#  tags:
#    - Auth
#  responses:
#    200:
#      description: success with user detail info
#      schema:
#        $ref: '#/definitions/model.UserDetail'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
GET        /user/:email                   controllers.auth.AuthController.getUserInfo(email: String)

# Know error with Play routes: https://stackoverflow.com/questions/36919316/playframe-work-cant-find-the-right-route

###
#  summary: Post a user picture with the user email id
#  description: >
#   Store the uploaded user picture as GridFS in MongoDB
#  tags:
#    - Auth
#  consumes:
#    - multipart/form-data
#  parameters:
#    - name: upload
#      in: formData
#      type: file
#      required: true
#      description: Picture to upload for the user profile
#  responses:
#    200:
#      description: success with response code
#    400:
#      description: Bad request (Has to be in picture format)
#    500:
#      description: internal server error (connection issues)
#  security:
#    - TokenKey: []
###
POST    /user/picture                      controllers.auth.GridFsController.saveUserPicture

###
#  summary: Update the user details. Different email will replace the older email
#  description: >
#   This can only be done by logged in user or Admin role.
#  tags:
#    - Auth
#  parameters:
#    - name: body
#      in: body
#      required: true
#      description: Update user detail form
#      schema:
#        $ref: '#/definitions/form.SignUpForm'
#  responses:
#    200:
#      description: success with id of newly created record
#      schema:
#        $ref: '#/definitions/model.UserDetail'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    400:
#      description: Bad request (min length of password is 3 and have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
POST        /user/:id                     controllers.auth.AuthController.updateUserInfo(id:Int)

###
#  summary: Toggle the user account for admin role
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - Auth
#  responses:
#    200:
#      description: success with id of toggled account
#      schema:
#        $ref: '#/definitions/com.krishna.response.OkResponse'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
POST     /admin/:email                    controllers.auth.AuthController.toggleAdminRole(email: String)

###
#  summary: Delete the user from the database
#  description: >
#   This can only be done by Admin role.
#  tags:
#    - Auth
#  responses:
#    200:
#      description: success with id of deleted account
#      schema:
#        $ref: '#/definitions/com.krishna.response.OkResponse'
#    400:
#      description: Bad request (have to be in correct email format)
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    401:
#      description: Unauthorized
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#    404:
#      description: Not found. Database is empty.
#      schema:
#        $ref: '#/definitions/com.krishna.response.ResponseErrorMsg'
#  security:
#    - TokenKey: []
###
DELETE     /user/:email                   controllers.auth.AuthController.removeUser(email: String)
