version: '3.9'

services:
  #Get the inspirational api from https://github.com/features/packages
#  inspirationa-quote-api:
#    image: ghcr.io/krishna-thapa/inspirational-quote-api/inspirational-quote-api:v1.0
#    container_name: inspirationa-quote-api
#    ports:
#    - 9000:9000
#    environment:
#      - PROJECT_ENV
#      - POSTGRES_DB
#      - POSTGRES_USER
#      - POSTGRES_PASSWORD
#      - POSTGRES_HOST
#      - ES_HOST
#      - REDIS_HOST
#    depends_on:
#      - elasticsearch
#      - redis
#      - postgres
#      - kibana
#      - filebeat

  # https://www.portainer.io/
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer-docker
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - "9004:9000"

  # https://www.elastic.co/
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
#    container_name: elasticsearch
#    environment:
#      discovery.type: single-node
#      network.host: 0.0.0.0
#      path.repo: /tmp/elastic4s
#    ports:
#      - "9200:9200"
#    volumes:
#      - "./conf/docker/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
#      - "es-data:/usr/share/elasticsearch/data:rw"
#    restart: unless-stopped

#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.10.2
#    container_name: kibana
#    # Kibana does not need a persistence volume as it uses ElasticSearch to persist its configuration.
#    ports:
#      - 5601:5601
#    volumes:
#    - "./conf/docker/kibana.yml:/usr/share/kibana/config/kibana.yml"
#    depends_on:
#      - elasticsearch
#  filebeat:
#    image: docker.elastic.co/beats/filebeat:7.10.2
#    container_name: filebeat
#    # user running FileBeat needs to be able to access all logs inside the containers
#    user: root
#    volumes:
#    - "./conf/docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
#    - "/var/lib/docker:/var/lib/docker:ro"
#    - "/var/run/docker.sock:/var/run/docker.sock"

  # https://redis.io/
  redis:
    image: redis:latest
    container_name: redis-docker
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - "./conf/docker/redis.conf:/redis.conf"
      - "redis-data:/data:rw"
    command: >
      bash -c "redis-server --appendonly yes
      && redis-server /redis.conf"

  postgres:
    image: postgres:latest
    container_name: postgres-docker
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - "./conf/docker/postgres.conf:/etc/postgresql/postgresql.conf"
      # for debian system use: /var/lib/postgresql/data/:/var/lib/postgresql/data/pgdata
      # for mac OS: ./pgdata/:/var/lib/postgresql/data/pgdata
      - "postgres-data:/var/lib/postgresql/data/pgdata"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4-docker
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - "pgadmin-data:/var/lib/pgadmin"

volumes:
  data: {}
  # es-data:
  #  driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
