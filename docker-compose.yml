version: '3.3'

services:
  #Get the inspirational api from https://github.com/features/packages
#  inspirationa-quote-api:
#    image: ghcr.io/krishna-thapa/inspirational-quote-api/inspirational-quote-api:v1.0
#    container_name: inspirationa-quote-api
#    ports:
#    - 9000:9000
#    environment:
#      - PROJECT_ENV
#      - POSTGRES_DB
#      - POSTGRES_USER
#      - POSTGRES_PASSWORD
#      - POSTGRES_HOST
#      - ES_HOST
#      - REDIS_HOST
#    depends_on:
#      - elasticsearch
#      - redis
#      - postgres
#      - kibana
#      - filebeat
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      network.host: 0.0.0.0
      path.repo: /tmp/elastic4s
    ports:
      - 9200:9200
    volumes:
      - "./conf/docker/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
      - "es-data:/usr/share/elasticsearch/data:rw"
    restart: unless-stopped
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.10.2
#    container_name: kibana
#    # Kibana does not need a persistence volume as it uses ElasticSearch to persist its configuration.
#    ports:
#      - 5601:5601
#    volumes:
#    - "./conf/docker/kibana.yml:/usr/share/kibana/config/kibana.yml"
#    depends_on:
#      - elasticsearch
#  filebeat:
#    image: docker.elastic.co/beats/filebeat:7.10.2
#    container_name: filebeat
#    # user running FileBeat needs to be able to access all logs inside the containers
#    user: root
#    volumes:
#    - "./conf/docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
#    - "/var/lib/docker:/var/lib/docker:ro"
#    - "/var/run/docker.sock:/var/run/docker.sock"
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - "./conf/docker/redis.conf:/redis.conf"
      - "redis-data:/data:rw"
    command: >
      bash -c "redis-server --appendonly yes
      && redis-server /redis.conf"
    restart: always
  postgres:
    image: postgres:latest
    container_name: pg-docker
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    ports:
      - 5432:5432
    volumes:
      - "./conf/docker/postgres.conf:/etc/postgresql/postgresql.conf"
      # for debian system use: /var/lib/postgresql/data/:/var/lib/postgresql/data/pgdata
      # for mac OS: ./pgdata/:/var/lib/postgresql/data/pgdata and copy the CSV files under pgdata
      # which will be under the project level directory, not the root level
      - "./pgdata/:/var/lib/postgresql/data/pgdata"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
  mongodb:
    image: mongo
    container_name: mongodb-quotes
    restart: always
    ports:
      - 27017:27017
    volumes:
      - data:/data
    #    environment:
    #      - MONGO_INITDB_ROOT_USERNAME=rootuser
    #      - MONGO_INITDB_ROOT_PASSWORD=rootpass
  mongo-express:
    image: mongo-express
    container_name: mongo-express-quotes
    restart: always
    ports:
      - 8081:8081
    environment:
      #      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      #      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongodb
volumes:
  data: {}
  es-data:
    driver: local
  redis-data:
    driver: local

networks:
  default:
    name: mongodb_network